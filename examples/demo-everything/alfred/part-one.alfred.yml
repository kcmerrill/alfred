one:
    summary: Displaying the task name

two:
    summary: A simple echo
    command: echo "A simple echo command"

three:
    summary: Change the working directory
    dir: /tmp
    command: pwd

four:
    summary: Notice how the directory has changed back?
    command: pwd

five:
    summary: Step five, but aliased as step six too! Space seperated
    command: ls
    alias: six six.one six.two

seven:
    summary: Step seven is a simple ls, but will automagically call step 8
    command: ls
    ok: eight
    fail: ten

eight:
    summary: This was only called because step seven was succesful.
    command: echo "Also,notice this is private. Cannot be called directly"
    private: true

nine:
    summary: Try to ls a folder that _hopefully_ doesn't exist. Notice exit code
    command: echo "Even though alfred worked, you can specifically set exit codes." && ls /kcwashere
    fail: ten
    ok: eight

ten:
    summary: Only called because step 9 failed
    command: echo "Again, notice how this step is private"
    private: true

eleven:
    summary: Call multiple tasks as a task group, space seperated
    tasks: four five six

twelve:
    summary: Call alfred within itself
    command: alfred eleven

thirteen:
    summary: Run ls every 1 seconds, or any golang duration
    command: ls
    every: 1s

fourteen:
    summary: Pass along arguments using go/text templates. Try running without an argument.
    command: ls {{ index .Args 0 }}
    usage: alfred fourteen foldername

fifteen:
    summary: Pass along arguments again ... but use defaults
    command: ls {{ index .Args 0 }}
    defaults:
        - "."

sixteen:
    summary: Remotes allow you to reuse common components. This will completely setup a git project as an example
    dir: /tmp
    git: clone kcmerrill/alfred alfred

seventeen:
    summary: Wait! Sure, you can sleep, but this will let you do so via a golang duration
    wait: 5s
    command: ls

eighteen:
    summary: You can combine everything you've seen above. Infinite loop
    command: test $(whoami) = "rooto"
    wait: 10s
    every: 7s
    fail: nineteen
    ok: nineteen.1
    exit: 42

nineteen:
    summary: You are not root, but checkout this multiline command while you're here
    private: true
    command: |
        cd /tmp && pwd
        cd /tmp
        pwd

nineteen.1:
    summary: You apparently _ARE_ root. Cowers in feer of your l33t/\/355.
    private: true
    command: |
        echo "Checkout this multi line command!"
        cd /tmp && pwd
        cd /tmp
        pwd

twenty:
    summary: As long as an alfred file is in a parent directory, you can call it and alfred will find it
    command: |
        mkdir directory
        cd directory
        echo "Current directory:"
        pwd
        echo "Now call alfred four, which is an alfred command that pwd"
        alfred four

twentyone:
    summary: Even though alfred worked, If the command failed you can still exit after running all of the failed tasks
    command: ls /asdf
    fail: four
    exit: 42

twentytwo:
    summary: Multitasks! You can combine this with other things too!
    multitask: long-task1 long-task2 long-task1 long-task2

alfred.vars:
    firstname: casey
    user: whoami
    pwd: pwd

twentythree:
    summary: Lets test out alfred.vars
    command: |
        echo The variable firstname lastname = {{ index .Vars "firstname" }} {{ index .Vars "lastname" }}
        echo You are the user {{ index .Vars "user" }}
        echo The pwd of this directory is {{ index .Vars "pwd" }}
    #Default vars if none are set ...
    vars:
        firstname: kc
        lastname: merrill

long-task1:
    summary: This long task takes 10 seconds
    command: |
        sleep 10
        echo "Done with 10 second long task"

long-task2:
    summary: This long task takes 9 seconds
    command: |
        sleep 9
        echo "Done with 9 second long task"

twentyfour:
    summary: Lets test out the log!
    log: /tmp/log.txt
    command: echo "This should be in /tmp/log.txt"

twentyfive:
    summary: Skip! Same as "exit" however, it only skips the task and _not_ exit the application
    command: ls /shouldhopefullyfail
    skip: true

twentysix*:
    summary: Notice the astrick? It means it's a "main" task. Useful for a long alfred file
    command: echo "See how it pops out from the rest?"

twentyseven:
    summary: Retry logic. Try X times before continuing on
    retry: 3
    command: |
        ls /step27-idonotexist

twentyeight:
    summary: You can watch for file changes too! Takes a regular expression
    watch: '.*\.go$'
    tasks: test

twentynine:
    summary: Commands is multiple command separated by newlines
    commands: |
        ls /doesnotexist
        touch /tmp/commands.txt

thirty:
    summary: Before running command, run a "test" first
    test: ls /doesnotexist
    command: |
        touch /tmp/test.txt

thirtyone:
    summary: Lets cleanup some arguments!
    command: |
        echo {{ index .CleanArgs 0 }}
    defaults:
        - bingo.was.-!hisnameo

thirtytwo:
    summary: Grab a UUID/Random string
    command: echo {{ .UUID }}

thirtythree:
    summary: Time.time usage
    command:
        echo {{ .Time.Unix }}

thirtyfive:
    alias: thirtysix
    summary: Look at the task number
    command:  echo TaskNumber - {{ index .TaskNumber }}